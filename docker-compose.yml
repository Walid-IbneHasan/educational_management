

services:
  web:
    build:
      context: .
      dockerfile: Dockerfile
    command: >
      sh -c "/wait-for-it.sh redis:6379 &&
             /wait-for-it.sh mongo:27017 &&
             /wait-for-it.sh rabbitmq:5672 &&
             python manage.py makemigrations &&
             python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             gunicorn educational_management.wsgi:application --bind 0.0.0.0:8000 --workers 3"
    volumes:
      - .:/app
      - static_volume:/app/static
      - media_volume:/app/media
    env_file:
      - .env
    depends_on:
      - redis
      - rabbitmq
      - mongo
    networks:
      - educational_management-network
    expose:
      - 8000
    ports:
      - "8000:8000"  # Temporary for development; remove in production
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G

  db:
    image: postgres:15
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - .env
    networks:
      - educational_management-network
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    expose:
      - 5432
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  redis:
    image: redis:7-alpine
    restart: always
    volumes:
      - redis_data:/data
    networks:
      - educational_management-network
    expose:
      - 6379
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 256M

  rabbitmq:
    image: rabbitmq:3.11-management
    restart: always
    env_file:
      - .env
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - educational_management-network
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
    expose:
      - 5672
      - 15672
    ports:
      - "15672:15672"  # Temporary for debugging; remove in production
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 30s

  mongo:
    image: mongo:7
    restart: always
    env_file:
      - .env
    volumes:
      - mongo_data:/data/db
    networks:
      - educational_management-network
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}
    expose:
      - 27017
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile
    command: >
      sh -c "/wait-for-it.sh redis:6379 &&
             /wait-for-it.sh rabbitmq:5672 &&
             celery -A educational_management worker --loglevel=info --concurrency=2"
    volumes:
      - .:/app
    env_file:
      - .env
    depends_on:
      - redis
      - rabbitmq
    networks:
      - educational_management-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile
    command: >
      sh -c "/wait-for-it.sh redis:6379 &&
             /wait-for-it.sh rabbitmq:5672 &&
             celery -A educational_management beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler"
    volumes:
      - .:/app
    env_file:
      - .env
    depends_on:
      - redis
      - rabbitmq
    networks:
      - educational_management-network
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 256M
  nginx:
    image: nginx:latest
    restart: always
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf # Mount your Nginx config
      - static_volume:/app/static # Volume for Django's collected static files
      - media_volume:/app/media # Volume for Django's collected media files
    ports:
      - "80:80" # Expose HTTP to the host
      # - "443:443" # Uncomment and configure for HTTPS later
    depends_on:
      - web # Nginx depends on the web service being available
    networks:
      - educational_management-network
    deploy:
      resources:
        limits:
          cpus: '0.2' # Small CPU limit
          memory: 128M # Small memory limit

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:
  mongo_data:
  static_volume:
  media_volume:

networks:
  educational_management-network:
    driver: bridge