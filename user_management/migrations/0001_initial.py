# Generated by Django 5.2 on 2025-05-31 06:00

import datetime
import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('institution', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(blank=True, max_length=254, null=True, unique=True)),
                ('phone_number', models.CharField(blank=True, max_length=13, null=True, unique=True, validators=[django.core.validators.RegexValidator(message="Phone number must be 11 digits starting with '0' (e.g., 01746134904), or 12 digits starting with '88', or 13 digits starting with '880'.", regex='^(0\\d{10}|88\\d{10}|880\\d{10})$')])),
                ('first_name', models.CharField(blank=True, max_length=30, null=True)),
                ('last_name', models.CharField(blank=True, max_length=30, null=True)),
                ('gender', models.CharField(blank=True, choices=[('male', 'Male'), ('female', 'Female'), ('other', 'Other')], max_length=10, null=True)),
                ('birth_date', models.DateField(blank=True, null=True)),
                ('profile_image', models.ImageField(blank=True, null=True, upload_to='profile_images/')),
                ('is_institution', models.BooleanField(default=False)),
                ('is_teacher', models.BooleanField(default=False)),
                ('is_student', models.BooleanField(default=False)),
                ('is_parents', models.BooleanField(default=False)),
                ('is_admission_seeker', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
        ),
        migrations.CreateModel(
            name='AdmissionRequest',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='pending', help_text='The status of the admission request.', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The date and time the request was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='The date and time the request was last updated.')),
                ('institution', models.ForeignKey(help_text='The institution to which the user is requesting admission.', on_delete=django.db.models.deletion.CASCADE, related_name='admission_requests', to='institution.institutioninfo')),
                ('user', models.ForeignKey(help_text='The user requesting admission.', on_delete=django.db.models.deletion.CASCADE, related_name='admission_requests', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Admission Request',
                'verbose_name_plural': 'Admission Requests',
            },
        ),
        migrations.CreateModel(
            name='InstitutionMembership',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('role', models.CharField(choices=[('teacher', 'Teacher'), ('student', 'Student')], max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('institution', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='memberships', to='institution.institutioninfo')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='memberships', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Invitation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('phone_number', models.CharField(blank=True, max_length=13, null=True, validators=[django.core.validators.RegexValidator(message="Phone number must be 11 digits starting with '0' (e.g., 01746134904), or 12 digits starting with '88', or 13 digits starting with '880'.", regex='^(0\\d{10}|88\\d{10}|880\\d{10})$')])),
                ('role', models.CharField(choices=[('teacher', 'Teacher'), ('student', 'Student')], max_length=20)),
                ('token', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField(default=datetime.datetime(2025, 6, 7, 6, 0, 9, 977494, tzinfo=datetime.timezone.utc))),
                ('is_used', models.BooleanField(default=False)),
                ('institution', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='invitations', to='institution.institutioninfo')),
            ],
        ),
        migrations.CreateModel(
            name='ParentChildRelationship',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('child', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='parents', to=settings.AUTH_USER_MODEL)),
                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='children', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['email'], name='user_manage_email_40c00d_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['phone_number'], name='user_manage_phone_n_0e4018_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='admissionrequest',
            unique_together={('user', 'institution')},
        ),
        migrations.AddIndex(
            model_name='institutionmembership',
            index=models.Index(fields=['user', 'institution'], name='user_manage_user_id_88967a_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='institutionmembership',
            unique_together={('user', 'institution')},
        ),
        migrations.AddIndex(
            model_name='invitation',
            index=models.Index(fields=['token'], name='user_manage_token_df092b_idx'),
        ),
        migrations.AddIndex(
            model_name='parentchildrelationship',
            index=models.Index(fields=['parent', 'child'], name='user_manage_parent__f0defd_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='parentchildrelationship',
            unique_together={('parent', 'child')},
        ),
    ]
